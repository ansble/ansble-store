{
	"about": {
		"me": {
			"name": "Daniel Sellers"
			, "social": {
				"twitter": "@daniel_sellers"
				, "instagram": "designfrontier"
				, "github": "designfrontier"	
			}
		}
		, "picture": "https://avatars3.githubusercontent.com/u/422540?v=3&s=460"
		, "bio": "<p>I currently work as a <span class=\"article--cross-out\">Web</span>Front-End Developer at <span class=\"article--cross-out\">NASA's Johnson Space Center (San Jacinto College contracts me out to NASA's education office)</span><a href=\"http://lds.org\">The Church of Jesus Christ of Latter-day Saints</a>. I program web applications and fine&ndash;tune user experience. In my spare time I take on <span class=\"article--cross-out\">freelance web development and graphic design gigs</span> race bicycles for <a href=\"http://saltcycleteam.tumblr.com/\">SaltCycle-Intelitechs</a> and run <a href=\"http://hacknightslc.com\">HackNight SLC</a>. I have designed a variety of different websites, check out my portfolio to see some examples. When I'm not working on the web, I like to take long walks on the beach. Just kidding. I like to bike, read, <span class=\"article--cross-out\">run</span>, play the guitar, build <span class=\"article--cross-out\">create</span> awesome stuff, and learn.</p><p>You can also find me on <a href=\"http://twitter.com/daniel_sellers\">twitter</a>, <a href=\"http://instagr.am/designfrontier\">instagram</a>, <a href=\"https://vimeo.com/danielsellers\">vimeo</a>, <a href=\"http://ridedomestique.com\">Ride Domestique</a>, <a href=\"http://firstsonginmyhead.tumblr.com\">First Song in my Head</a>, <a href=\"http://open.spotify.com/user/designfrontier\">spotify</a>, <a href=\"http://dribbble.com/daniel_sellers\">dribble</a>, <a href=\"http://www.flickr.com/photos/45758287@N07/\">flickr</a>, and <a href=\"http://github.com/designfrontier\">github</a><a></a>.</p>"
		, "colophon":"<p>This site is built with monument on iojs hosted in heroku's cloud. Fonts are League Spartan and Helvetica.</p>"
	}
	, "eleven": {
		"title": "11"
		, "content": "<p>Today on the 10 year anniversary of September 11th I thought I would reminisce about my memories from that day, far from New York City. I am working to compile my families&rsquo; stories and may expand beyond them to collect the stories of others who were far away from ground zero on that day. I pray that these stories and days will remind us that we are &ldquo;One Nation Under God, Indivisible with liberty and justice for all&rdquo;.</p><p>On the morning of September 11th, 2001 I was 17 and getting ready for a day full of work and school. I lived in southern Austin, TX with my parents and siblings and was attending Austin Community College, studying Computer Information Systems. I had two jobs, one working in the computer lab there, and the other at Randall&rsquo;s, a grocery store owned by Safeway.</p><p>It started off like any other day, eating breakfast, getting ready for work. I had a class later in the day so I got my backpack loaded and ready to go.</p><p>I don&rsquo;t know how we all wound up in the living room gathered around the TV, but we did. I stood off to the left of the TV watching in shock as the news stations stopped everything to cover the unfolding tragedy. I remember watching the first tower burning. I remember the confusion that seemed to grip the broadcasters as everyone tried to understand what was going on. I wasn&rsquo;t an expert but that gash in the building looked too big for a small private plane...</p><p>And then we all found out it wasn&rsquo;t. It wasn&rsquo;t an accident, it wasn&rsquo;t a small private plane. I caught sight of the second plane. I remember watching as the second plane slammed into the second tower and knowing this was an attack. My younger brother and I loved planes and knew immediately that a large passenger plane had been piloted into the towers. We recognized the tail paint.</p><p>For me the scope of the disaster was so broad that it didn&rsquo;t seem quite real. I couldn&rsquo;t quantify that kind of loss. I still wonder sometimes if I understand the true scope of what happened that day, the number of lives lost, the individual tragedies that played out. I am not sure if I ever really will, or if that is even humanly possible.</p><p>As the camera zoomed in on the burning, gaping hole in the first tower, I noticed something bright dripping from the corners and bottom. I knew it was molten metal, and prayed that they would be able to get everyone out before it came down. It could only be a matter of time before the structure failed. We as a family watched in a mix of silence, and speculative analysis.</p><p>The first tower came down just before I had to walk out the door to get to work. I was late for work that day, because I stayed. I had to watch. And then it happened. I watched in quiet horror as floor after floor was crushed by those above it as the second tower came down. I hoped beyond hope that everyone was out. </p><p>When I got to work the news was on at the grocery store. In the lulls between checking out customers' groceries we all wandered over to the TV they had setup to show the coverage. As the day progressed, those lulls got shorter and shorter and we got busier and busier. People were stocking up. There were rumors that Austin could be next and people wanted to hole up in their homes. Huge carts of groceries were flying up to our checkout lines and then out the doors. It was like the day before thanksgiving, except everyone had fear in their eyes.</p><p>I remember going out to a customer&rsquo;s car and noticing the fighters, I remember them being pairs of F-15s, patrolling the skies. Not a normal sight in Austin since the closing of Bergstrom  Air Force Base. I am not sure if it was more comforting or nerve wracking to see them there, but there they were flying patterns over the Capitol of Texas.</p><p>I was a little nervous about going to school later in the day. The campus of Austin Community College I was attending was one of the highest towers in the area back then. But tactically it wasn&rsquo;t much of a target. I thought they would close it, hoped they would close it, but they didn&rsquo;t so I left work and drove to school.</p><p>I watched the sky my entire drive there.</p><p>Almost no one showed up for class. Our professor had been in the air force and so we talked about what was going on for most of class. I think there were two other students in the classroom. After that is back home, and I don&rsquo;t remember much of the rest of that day.</p><p>In the days that followed came numerous discussions with my mother about what this meant. What war would mean, because it was clearly coming. Most of our talk was about the draft, seemed like everyone thought that it was going to be re-instituted in those early days after 9/11. I remember that Mom mentioned being a conscientious objector to me. I told her I couldn&rsquo;t. If my country was under attack, and needed me to serve, I would do it willingly. Because it&rsquo;s what my church had always taught me, and what I believed in. That freedom is worth dying for. I still believe that and am proud to be part of country filled with others who believe the same way, and put there lives on the line for it day after day.</p> <a href=\"https://www.flickr.com/photos/dfb_photos/5820706865\" title=\"world trade center and helicopter by dfbphotos, on Flickr\">Photo courtesy of dfbphotos</a>"
		, "updated": "Tue Sep 13 2011 00:00:00 GMT-0600 (MDT)"
		, "id": "eleven"
		, "type": "article"
		, "publicApi": true
		, "published": "Tue Sep 13 2011 00:00:00 GMT-0600 (MDT)"
		, "created": "Tue Sep 13 2011 00:00:00 GMT-0600 (MDT)"
		, "tags": [
			"America"
			, "9/11"
			, "2001"
			, "September 11"
		]
		, "images": [
		]
		, "headerImage": "/images/twoTowers.comp.jpg"
	}
	, "current-projects-update": {
		"title": "Current Projects Update"
		, "content": "<p>I realized tonight that I have a whole bunch of projects lying around that aren't mentioned anywhere here on designfrontier. So to remedy that I decided to put together this quick article.</p><p><a href=\"http://randpop.appspot.com\">RandPop</a> : a responsive website for creating random numbers in a variety of forms, from flipping a coin to sets of random numbers. More features are in the works though this particular project is on hold at the moment. The dice (which are completely created with CSS3 gradients) came in handy the other day playing with my nieces and nephews).</p><p><a href=\"http://typesette.appspot.com\">TypeSette</a> : Back when I was putting together The Adventures of Sherlock Holmes I needed a quick and easy way to clean out the extra line breaks, and whitespace in Project Gutenberg versions of the text. So I created typesette to automate that process.</p><p><a href=\"http://randomLDSTalk.appspot.com\">Random LDS Talk</a> : Every once in a while I want to read a random religious article so I wrote a quick ColdFusion app that parses the RSS feeds on LDS.org and redirects you to a random selection. Most interesting part was writing the Java based web scraper for the General Conference Archive, since it didn't already have a feed. Still a little buggy but works good enough for now.</p><p><a href=\"http://standresolved.appspot.com\">Stand Resolved</a> : A simple goal tracking application designed to give you a daily reminder of what your goals are. Mostly defunct at this point. If you are interested in purchasing the domain let me know... I may redesign and develop it as a mobile app in the future.</p><p>I recently wrote about it but I might as well mention it again.Tokenizer is my first open source project, a form token management system designed to make fighting XSRF as simple as possible.</p><p>Well that's the run down of the smaller personal apps I have out there. Check them out and let me know if you have any suggestions for where they can be improved. Email or twitter is the best way to get ahold of me.</p>"
		, "updated": "Mon May 09 2011 00:00:00 GMT-0600 (MDT)"
		, "id": "current-projects-update"
		, "type": "article"
		, "publicApi": true
		, "published": "Mon May 09 2011 00:00:00 GMT-0600 (MDT)"
		, "created": "Mon May 09 2011 00:00:00 GMT-0600 (MDT)"
		, "tags": [
			"open source"
			, "apps"
			, "list"
			, "development"
		]
		, "images": [
		]
		, "headerImage": ""
	}
	, "dont-call-me-ill-call-you-single-request-responsive-images": {
		"title": "Don't Call Me. I'll Call You. Single Request Responsive Images"
		, "content": "<p>We&rsquo;ve been talking about responsive design around the office a lot lately. It&rsquo;s kind of a big deal these days. The holy grail seems to be responsive images, or a system that allows you to determine the correct size image for the users browser. This reduces the amount of data being downloaded by mobile devices while still providing a higher resolution version for desktop, and tablet browsers. By images I am talking about image tags, frameworks like 320 and up and media queries can take care of the layout images in css.</p><p>One of the best systems out there is by the Filament group, their code is also on GitHub. They are doing some awesome things that make it easy to get started with responsive images.</p><p>So in an effort to advance the discussion, and push this process even farther, here is a method for removing the double http request penalty associated with their system. Yep, you heard that right. 1 http request per image regardless of the size of your screen. And it&rsquo;s cross browser compliant with a non-javascript fall back.</p><p>Let's take a quick look at the javascript:</p><p><pre><code>\nvar resizeImages = function(){\nvar imgs = $('img');\nvar width = $(window).width();\n\n\nfor(var i = 0; i < $(imgs).length; i++){\nvar thisImg = $(imgs)[i];\nvar thisSrv = $(thisImg).attr('src');\nif(thisSrv == undefined || thisSrv == '')\nthisSrv = $(thisImg).attr('data-src');\n\n\nif(width > 1180)\n$(thisImg).attr('src',thisSrv.replace(/\/[0-9]+\//,'/1180/'));\nif(width > 960 && width < 1180)\n$(thisImg).attr('src',thisSrv.replace(/\/[0-9]+\//,'/960/'));\nif(width > 480 && width < 960)\n$(thisImg).attr('src',thisSrv.replace(/\/[0-9]+\//,'/480/'));\nif(width < 480)\n$(thisImg).attr('src',thisSrv.replace(/\/[0-9]+\//,'/320/'));\n\n\nif($(thisImg).hasClass('responsive'))\n$(thisImg).removeClass('responsive');\n}\n};</code></pre></p><p>Now that you have seen the bulk of the code we have a few things to talk about. First of all, the size cutoffs are totally arbitrary in this example. Second, this is a convention over configuration system. It requires that you have the responsive sized images stored in a strict directory structure and that you add a little bit of extra markup to handle the non-javscript fall back. But, we'll come back to that. Third, this uses jquery, though a library agnostic version would be a pretty simple derivative.</p><p>You can probably guess what the markup for an image looks like based on that function, either way here is what your markup would look like:</p><pre><code>&lt;img src=\"/respond/img/myImage.jpg\" /&gt;\n\n\n\n&lt;img data-src=\"/respond/img/320/myImage.jpg\" class=\"responsive\" /&gt;\n&lt;noscript&gt;\n&lt;img src=\"/respond/img/320/myImage.jpg\" /&gt;\n&lt;/noscript&gt;</code></pre><p>The first <pre><code>&lt;img&gt;</code></pre> tag is non-responsive. It will be ignored by the system and displays normally. The second, is what your <img> tags look like for a responsive image. No src attribute. This is important, it prevents the browser from hitting the server before we figure out what image size we need. The function above handles swapping the data-src into the src and replacing the 320 with the appropriate size directory. The responsive class is critical to this whole thing too. It should default to display:hidden so that the image doesn&rsquo;t appear unless javascript is running. Also prevents a flash of missing image in IE.</p><p>The last image, the one in <code>&lt;noscript&gt;</code> tags is our fallback. If the browser does not support javascript the responsive <code>&lt;img&gt;</code>, which does not contain a valid src attrribute, will not load anything and remain hidden by theresponsive class. <code>&lt;noscript&gt;</code> provides a last ditch fall back for our non-javascript users. One of the advantages to this is that it is only executed when needed, keeping http requests to a minumum. Another added bonus is you can specify what ever size image you want for the fall back. Yay freedom!</p><p>So <code>&lt;noscript&gt;</code> wrapped images are really what set this method apart. For every image you include in the page you will need to have a <code>&lt;noscript&gt;</code> wrapped version of the image immediately following, and styled similarly to, the responsive version. Is this the most elegant solution? Probably not. But for the price of a little extra code you eliminate duplicate downloads and unnecessary http requests.</p><p>One more major thing. Let&rsquo;s talk about directory structure. Sorry&hellip; but it&rsquo;s got to be discussed. Take a look at how the image directories are setup in the example code. There is an img directory with 4 subdirectories. Non-responsive images go in the base img directory. Appropriately sized images that will be served responsively go in each of the subdirectories. This means that you will need to provide 4 copies per image displayed on the page. Really though that&rsquo;s a requirement of every responsive image solution out there.</p><p>Ok so really that wasn&rsquo;t that bad was it? Here are the files and example directory structure. As always hit me up with questions or comments:<a href=\"mailto:daniel@designfrontier.net\">Email me</a> or <a href=\"http://twitter.com/daniel_sellers\">tweet me</a>.</p>"
		, "updated": "Thu Sep 29 2011 00:00:00 GMT-0600 (MDT)"
		, "id": "dont-call-me-ill-call-you-single-request-responsive-images"
		, "type": "article"
		, "publicApi": true
		, "published": "Thu Sep 29 2011 00:00:00 GMT-0600 (MDT)"
		, "created": "Thu Sep 29 2011 00:00:00 GMT-0600 (MDT)"
		, "tags": [
			"frontend"
			, "markup"
			, "designs"
			, "responsive"
		]
		, "images": [
		]
		, "headerImage": ""
	}
	, "hide-the-admins": {
		"title": "Hide the Admins"
		, "content": "<p>This morning after reviewing the hackmycf.com* scan results foransble.com I noticed that the only major security issue that turned up was that the railo admin was accessible from a public IP address. &ldquo;Hmm...&rdquo; I thought, &ldquo;I wonder how you lock that down properly, using thereverse proxy setup I am running.&rdquo; I figured I could do it in tomcat, but that would get ugly fast if when I start scaling out my application servers. So after some googling I found several other posts on securing the railo admin.</p><p>Particularrly after reading Marcos Placona&rsquo;s post on doing this in Apache, I figured that something similar could be done in Cherokee. Turns out it can and here is how you do it:</p><p><ol><li>Login to your server and start up the cherokee admin server (I only allow my IP through the firewall on port 9090 so I use cherokee-admin -b).</li><li>Use the login credentials that the startup process generates to login to the cherokee-admin http://yoursite.com:9090.</li><li> Now that you are logged in go to the ‘Virtual Servers&rsquo; section and click on the ‘default&rsquo; link under the behavior tab. </li><li>What you want to look for is the new button in the top of the left column. It&rsquo;s right next to the behavior heading. Click it.</li><li>Go with Manual and select ‘directory&rsquo; from the rule type dropdown.</li><li>Enter ‘/railo-context/admin&rsquo; in the Web Directory box that appears</li><li>Click Add.</li><li>Setup the handler like you did for the default when you created your box. If you followed the directions in my last article you can use them again.</li><li>Click the security tab</li><li>Under access restrictions enter your IP address (your internet facing IP address(whatismyip.org) not your local one in most cases) and any other IPs you want to have access to the admin panels.</li><li>Hit save and choose graceful restart.</li><li>Check and make sure you still have access from your computer and that other IPs don&rsquo;t. I used my iPhone on it&rsquo;s 3G connection to check that.</li><li>The last thing is to shutdown the Cherokee admin you started, unless you are doing other stuff. No reason to leave it around.</li></ol></p><p>That&rsquo;s all there is to it. Your admin panels have now been hidden for all your railo servers, and any you might add in the future. You are on your way to a more secure server setup. Good luck out there!</p><p>* If you aren't checking your servers with <a href=\"http://hackmycf.com\">hackmycf.com</a>, why not? You should be. It's an awesome service and has a free option. Go try it out.</p>"
		, "updated": "Tue Sep 13 2011 00:00:00 GMT-0600 (MDT)"
		, "id": "hide-the-admins"
		, "type": "article"
		, "publicApi": true
		, "published": "Tue Sep 13 2011 00:00:00 GMT-0600 (MDT)"
		, "created": "Tue Sep 13 2011 00:00:00 GMT-0600 (MDT)"
		, "tags": [
			"security"
			, "ansble"
			, "aws"
			, "railo"
			, "cfml"
		]
		, "images": [
		]
		, "headerImage": ""
	}
	, "line-height-line-height-line-height": {
		"title": "Line-Height... lineheight... line-height"
		, "content": "<p>Consider this a Public Service Agreement: There is a bug loose in the internet. It&rsquo;s a subtle bug but so far every browser I have checked has some variation of this bug.</p><p>So what is this bug? Will it eat my website? Does it carry diseases? Is it a virus?! Will there be zombies?</p><p>Ok, calm down. Let me answer those in reverse order (because it&rsquo;s more fun that way).</p><p>There will be no zombies as a result of this bug. I promise. We&rsquo;re pretty sure about that.</p><p>It is not a virus. There are many viruses on the internet but this is not one of them.</p><p>It does not seem capable of carrying diseases.</p><p>Generally it will not eat your website, though it probably lives there without you knowing about it. This is generally not an issue, though if your website develops odd line spacing, spots, blurry vision, delusions of grandeur, ugly layouts, bad design in general, or starts acting strangely, we suggest that you consult with a professional. Also, if your website starts talking to you please seek proper medical or professional attention.</p><p>The bug is embedded in the way that various browsers deal with math, and line-height in specific. For an example go look at this link in as many browsers as you can get your hands on: <a href=\"http://jsfiddle.net/95cqM/1/\">http://jsfiddle.net/95cqM/1/</a></p><p>The line-height value changes based on whether it is specified merely as a ratio or using the em unit of measure, which is a ratio. All browsers except Firefox demonstrate this part of the bug, returning different values for the two which are theoretically equivalent.</p><p>The second aspect of the bug is that there really shouldn&rsquo;t be a way to specify fractional pixels. The concept of fractional pixels doesn&rsquo;t actually exist. A pixel size is an integer, no decimals allowed because a computer doesn&rsquo;t know how to draw half a pixel. At least as far as I know&hellip;</p><p>Realistically this is more of an interesting discovery, and less of a problem. Unless you are doing some calculation based on line-height in javascript you won&rsquo;t see any weird behavior as a result of it. If you are&hellip; well you&rsquo;re going to need to account for this weirdness in your calculations. Welcome to the Internet!</p>"
		, "updated": "Wed Jul 31 2013 00:00:00 GMT-0600 (MDT)"
		, "id": "line-height-line-height-line-height"
		, "type": "article"
		, "publicApi": true
		, "published": "Wed Jul 31 2013 00:00:00 GMT-0600 (MDT)"
		, "created": "Wed Jul 31 2013 00:00:00 GMT-0600 (MDT)"
		, "tags": [
			"line-height"
			, "css"
			, "js"
		]
		, "images": [
		]
		, "headerImage": ""
	}
	, "now-serving-obsolescense": {
		"title": "Now Serving: Obsolescence"
		, "content": "<p>This article is part of a series, &ldquo;Now Serving,&rdquo; that takes a look at the changes in design, and consumer culture, that are happening right now.</p><p>&ldquo;We have advanced technologically so far, and yet somehow it&rsquo;s almost some sort of paranoia where we are afraid to really say: we live in the third technological revolution. I have an iPod in my pocket, I have a mobile phone, I have a laptop, but then somehow I end up going home and sitting on wood spindle whittengale like chairs. So in a way you could argue that we&rsquo;re building all these really kitsch stage sets that have absolutely nothing to do with the age in which we live in. Strange. I find it very... extremely perverse in a way.</p><p>…</p><p>Why do we feel like we need to kinda keep revisiting the archetype over and over again?&rdquo;</p><p>—Karim Rashid in Objectified (clip)</p><p>While I often disagree with Karim he is right about some of what he says. We do revisit archetypes, even when the technology we have would allow us to abandon them completely. Karim thinks it&rsquo;s perverse in a way. I disagree, I think it makes sense. It is human nature.</p><p>There is a cultural shift happening today, just as surely as their was in the 80&rsquo;s and 90&rsquo;s with the introduction of cheap goods made in third world countries. Its roots lie in the fusion of our reactions to the availability of cheap goods, the financial instability of our current post-recession world, and the human desire for connection and permanence. And it&rsquo;s happening right now.</p><p>Let&rsquo;s start with a bit of history. Since the 1960s the USA and the rest of the developing world have been shifting the production of increasingly complex goods to the developing world. As the Government Accountability Office points out (referring specifically to the semiconductor industry) &ldquo;Although a lower labor cost was initially a key factor that attracted firms to offshore locations, other factors such as technological advances, available skilled workers, and foreign government policy, also played roles.&rdquo; (source) With an increasing number of inexpensive labor hours, friendly government policies in the developing world, and the shrinking of the world by airlines and the Internet, businesses faced lower and lower hurdles to moving production of good over seas.</p><p>This had a few consequences. First, manufacturing jobs in the developed world began to decline. Second, the cost of manufacturing goods was decreased, in some cases dramatically. I remember listening to a lesson in design school about the cost of manufacturing pots in China and how it was cheaper to produce a pieced, welded, hollow pot handle then a cast solid handle of the shame shape. Simply because the cost of materials saved was greater then the extra cost of welding, grinding, and buffing out the seams. This has, in a may ways, been a great thing for the developed world&rsquo;s lifestyle as it dramatically reduced the cost of goods. Just stop and think about the reduction in the cost of a computer, earphones, or kitchen goods over the last two decades.</p><p>This brings us to the third consequence. The rise of inexpensive, disposable goods. To be clear I include anything created with planned obsolescence in mind, in the category of disposable goods. Even computers, printers, and other consumer electronics. Combine the rise of cheap labor with the plastic revolution, think The Graduate: </p><p>Mr. McGuire: I want to say one word to you. Just one word.</p><p>Benjamin: Yes, sir.</p><p>Mr. McGuire: Are you listening?</p><p>Benjamin: Yes, I am.</p><p>Mr. McGuire: Plastics.</p><p>(source), and the market has now become glutted with inexpensive knick-knacks that are cheaper to replace then to repair.</p><p>A quick example of this shift in manufacturing can be found in one of my current interests/obsessions. Print-making. The letterpress, which dominated printing for decades has been in large part replaced by digital offset printing. In our homes it has been replaced by ink jet and laser printers that churn out documents at a rate that would have shocked Ben Franklin. A letterpress was, and is, an expensive investment that has to be meticulously cared for and maintained. My ink jet printer is not. In fact I have, at least once, bought an entirely new printer because it was cheaper then purchasing new ink cartridges for the one I already had. Printers, and not just the items they are used to produce, have in large part become ephemera.</p><p>As this process of cheapification accelerated through the 90s, and into the first decade of the new century, it began to have an interesting effect. People weren&rsquo;t happy about it. Sure we like that the goods are cheap and easily available. We enjoy the improved lifestyle it has provided for us. But, in large part you get what you pay for and we know it. Most of the goods available to us are cheap in every sense of the word. And we don&rsquo;t like it.</p><p>We don&rsquo;t like the idea that everything we buy will be obsolete or broken in 6 months. Humans are uncomfortable with the semi-permanence of planned-obsolescence-cheapified goods. We want commitment, good old fashioned lasting commitment. Something that we can use everyday and then hand down to our children.</p><p>The wonderful picture of the Heidelberg was taken by rutnikqueen and was used here by permission.</p>"
		, "updated": "Sat Jan 15 2011 00:00:00 GMT-0700 (MST)"
		, "id": "now-serving-obsolescense"
		, "type": "article"
		, "publicApi": true
		, "published": "Sat Jan 15 2011 00:00:00 GMT-0700 (MST)"
		, "created": "Sat Jan 15 2011 00:00:00 GMT-0700 (MST)"
		, "tags": [
			"obslete"
			, "history"
			, "culture"
			, "design"
			, "Now Serving"
		]
		, "images": [
		]
		, "headerImage": ""
	}
	, "relaunch-of-designfrontier": {
		"title": "Relaunch of DesignFrontier"
		, "content": "<p>So here it is! After having worked for many hours, it's official. The redesign process has been exciting. Creating new features in new ways has been a blast.</p><p>Is it done? Far from it. I am still working on the comment section for articles (sorry!) which should be done shortly. I am also working on putting together the portfolio section, updating my presentations and fine-tuning performance and copy.</p><p>When I am done, and have some more time, I'll work up a better article on the process and include some sketches.</p><p>For now I'll just say TypeKit, Coldfusion and jQuery are awesome together!</p>"
		, "updated": "Wed Feb 03 2010 00:00:00 GMT-0700 (MST)"
		, "id": "relaunch-of-designfrontier"
		, "type": "article"
		, "publicApi": true
		, "published": "Wed Feb 03 2010 00:00:00 GMT-0700 (MST)"
		, "created": "Wed Feb 03 2010 00:00:00 GMT-0700 (MST)"
		, "tags": [
			"about"
			, "designfrontier"
			, "design"
		]
		, "images": [
		]
		, "headerImage": ""
	}
	, "setting-up-speed-cherokee-railo-and-couchDB-on-AWS": {
		"title": "Setting up Speed: Cherokee, Railo and CouchDB on AWS"
		, "content": "<p>I am working on a little side project (ansble.com) which is going to require scalability, and a layered architecture that I just couldn't reasonably build in a physical environment. So I started toying with Amazon Web Services and realized that there wasn&rsquo;t a lot of documentation on the server combination I was planning to use.</p><p>The whole architecture is fronted by Cherokee web server, a really fast web server that puts apache and even nginx to shame. It also has a beautiful admin site that makes configuration a breeze. Behind that the app server layer is Railo running on Apache Tomcat. Railo is fast, free, and fast. The DB layer is CouchDB, with a second Cherokee server handling load balancing between the Railo layer and the CouchDB layer. The other decision was to use the Amazon Linux AMI in order to take advantage of Amazon&rsquo;s hard work and updates.</p><p>To get started let&rsquo;s spin up four Amazon Linux AMI instances (go 64 bit, all the software we are dealing with supports it so no reason for 32 bit). Put all of them in the default security group and then create a security group for each layer of the architecture (One for web servers, application servers, load balancers, and database servers) and place one instance in each group. The instance that will be your web server instance should be in the default security group and the web servers security group. This is important because you can&rsquo;t change security groups after you spin up your instances.</p><p>That done, let&rsquo;s setup the Railo server first so we can configure the web server as soon as we install it. SSH into your app server instance (something like ssh -i mykeyIcreated ec2-user@myec2instance.amazon.com on linux, or os x) and follow these steps:<ol><li>execute sudo yum upgrade to upgrade and update the server instance. When I wrote this there were about 121 MB worth of updates as soon as I spun up the instance.</li><li>Create a directory to store the railo installer, I went with railoInstaller. (mkdir railoInstaller)</li><li>cd ~/railoInstaller and then wget http://www.getrailo.org/down.cfm?item=/railo/remote/download/3.2.3.000/tomcat/linux/railo-3.2.3.000-pl0-linux-x64-installer.run to download the installer.</li><li>Change the permissions on the file you just downloaded so it will execute (chmod 744 railo-3.2.3.000-pl0-linux-x64-installer.run)</li><li>Execute the installer and walk through the install directions (sudo ./railo-3.2.3.000-pl0-linux-x64-installer.run). Make sure you create a user for railo and tomcat when it asks what user to run it under.</li><li>Once the install is done move up one directory (cd ..) and delete the railoInstall folder (rm -r railoInstall)</li><li>Railo is now running on port 8888 on the server. This will be accessible to the web server (if you put them both in the default group) but you will need to tinker with the security group&rsquo;s firewall to be able to access it right now. Do it and go to the admin panels (server and web) and set passwords right away. Close the port once you are done with that.</li></ol></p><p>That&rsquo;s all there is to getting a basic Railo server up and running on AWS. You will still need to put files on it and setup the contexts but this gets the box up and running and brings us to... the Cherokee web server! SSH into your web server instance and follow these steps:<ol><li>Add a couple of other RPM repositories to address dependencies by running the following:<ol><li>sudo rpm -Uhv http://apt.sw.be/redhat/el5/en/i386/rpmforge/RPMS/rpmforge-release-0.3.6-1.el5.rf.i386.rpm</li><li>sudo rpm -Uvh http://download.fedora.redhat.com/pub/epel/5/i386/epel-release-5-4.noarch.rpm</li><li>sudo rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/Redhat/5/i386/ius-release-1.0-8.ius.el5.noarch.rpm</li></ol><li>Now let&rsquo;s execute sudo yum upgrade to upgrade and update the server instance.</li><li>Time to do the install: sudo yum install cherokee</li><li>Server is now installed but not running, no worries we&rsquo;ll spin it up from the admin panel. Open port 9090 on your web servers security group to your IP and then execute sudo cherokee-admin -b</li><li>Open a browser up and go to your web server&rsquo;s public DNS (it&rsquo;s on the AWS dashboard) on port 9090. You will be prompted for a username and password. Username is admin and the password is in the terminal window where you just started the cherokee admin. It changes every time so you will have to repeat this process every time you need to access the admin panel.</li><li>Go to the information sources tab (top right with a gear on it) and create a new information source for Railo. Name it something that makes sense (appserver-1 maybe...) and for hostname and port enter the local DNS name (also on the AWS dashboard) for your Railo server and 8888 for the port (somethingrandom.amazon.com:8888).</li><li>Switch to vServers and click on the behaviours tab, then click the &ldquo;default&rdquo; link. We want to setup the default behavior to pass everything on to the application server.</li><li>If you aren&rsquo;t already on the handler tab go there and change the handler select box to ‘http reverse proxy.&rsquo; Scroll to the bottom to pick the round robin type to use (ip hash, or round robin) in the selection box for balancer.</li><li>Pick the type you want and wait. The screen will flicker and you will be back at the top. Scroll back to the bottom and select the information source you just created from the drop down.</li><li>Save it (button or link in the very top right corner of the page, next to the Advanced cog) and head back to the home page.</li><li>Start the Cherokee server and check in your browser that you are getting the Railo welcome page.</li><li>Back in your terminal window close the cherokee-admin by ctrl+c -ing it. Done with Cherokee!</li></ol></p><p>Now that we have an App Server Layer and a Web Server layer we can turn our attention to the DB Layer and the load balancer for it.</p><p>We&rsquo;ll start with CouchDB since we already know how to setup Cherokee. This is the most complicated install of the three servers but it&rsquo;s not that bad really.<ol><li>Add dependencies repositories:<ol><li>sudo rpm -Uhv http://apt.sw.be/redhat/el5/en/i386/rpmforge/RPMS/rpmforge-release-0.3.6-1.el5.rf.i386.rpm</li><li>sudo rpm -Uvh http://download.fedora.redhat.com/pub/epel/5/i386/epel-release-5-4.noarch.rpm</li><li>sudo rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/Redhat/5/i386/ius-release-1.0-6.ius.el5.noarch.rpm</li></ol></li><li>Upgrade and update the server: sudo yum upgrade</li><li>Time to install some dependencies. We are going to be using build-couchDB because it simplifies things so we will add git for simplicity. The command you want to run is: sudo yum install gcc gcc-c++ libtool zlib-devel openssl-devel rubygem-rake make git</li><li>Now we&rsquo;ll clone the build-couchDB repo git clone https://github.com/iriscouch/build-couchdb.git</li><li>We need to setup the submodules now so everything will work correctly<ol><li>cd into build-couchdb</li><li>git submodule init</li><li>git submodule update</li></ol></li><li>Run rake</li><li>Wait a long long time... go get a drink, have a snack. Seriously, go watch a movie... Takes about 2 hrs for couchDB to build from source on the micro Amazon AMI.</li><li>Now that it&rsquo;s done building we need to edit the bind port in the local.ini file to 0.0.0.0 so that it will answer something other than localhost (build-couchdb/build/etc/couchdb/local.ini)</li><li>Start couchdb couchdb-build/build/bin/couchdb -b and you&rsquo;re done with CouchDB setup.</li></ol></p><p>That brings us to the last server. The Cherokee load balancer that will sit in front of our CouchDB layer. It&rsquo;s the same exact process we used for Cherokee before but I&rsquo;ll repeat it so you don&rsquo;t have to scroll back up there to read it.<ol><li>Need to add some RPM repositories to address some dependencies:<ol><li>sudo rpm -Uhv http://apt.sw.be/redhat/el5/en/i386/rpmforge/RPMS/rpmforge-release-0.3.6-1.el5.rf.i386.rpm</li><li>sudo rpm -Uvh http://download.fedora.redhat.com/pub/epel/5/i386/epel-release-5-4.noarch.rpm</li><li>sudo rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/Redhat/5/i386/ius-release-1.0-6.ius.el5.noarch.rpm</li></ol></li><li> Execute sudo yum upgrade to upgrade and update the server instance.</li><li>Do the install: sudo yum install cherokee</li><li>Server is now installed but not running. We&rsquo;ll spin it up from the admin panel to make things simple. Open ports 80 and 9090 on the load balancer security group to your IP and then do sudo cherokee-admin -bdecimal</li><li>Open a browser up and go to your server&rsquo;s public DNS (it&rsquo;s on the AWS dashboard) on port 9090. You wil be prompted for a username and password. Username is admin and the password is in the terminal window where you just started the cherokee admin.</li><li>Go to the information sources tab (top right with gears on it) and create a new information source for CouchDB. Name it something that makes sense (couchDB-1 maybe...) and for hostname and port enter the local DNS name for your couchDB server and 5984 for the port (somethingrandom.amazon.com:5984). 5984 is the default port that CouchDB runs on.</li><li>Switch to vServers and click on the behaviors tab, then click &ldquo;default&rdquo;. We want to setup the default behavior to pass everything on to the CouchDB server.</li><li>If you aren&rsquo;t already on the handler tab go there and change the handler select box to ‘http reverse proxy.&rsquo; Scroll to the bottom and pick the round robin type to use (ip hash, or round robin) in the selection box for balancer.</li><li>The screen will flicker and you will be back at the top. Scroll back to the bottom and select the information source you just created from the drop down.</li><li>Save it (button or link in the very top right corner of the page, next to the Advanced cog) and head back to the home page.</li><li>Start the Cherokee server and check in your browser that you are getting the couchDB JSON object when you go to cherokee&rsquo;s public dns.</li></ol></p><p>With that done you now have a very flexible architecture that will allow you to scale out any layer that presents performance issues. My tests withblitz.io show that this basic setup should be able to handle as up to 12.5 million requests per day with no performance enhancements to the servers. It&rsquo;s fast. As always if you have questions, thoughts, criticism shoot me an email or @ reply me on twitter. Good luck out there!</p><p>PS: if you sign up for blitz.io and use this link I'll get some additional concurrency to test things even better!</p>"
		, "updated": "Tue Sep 13 2011 00:00:00 GMT-0600 (MDT)"
		, "id": "setting-up-speed-cherokee-railo-and-couchDB-on-AWS"
		, "type": "article"
		, "publicApi": true
		, "published": "Tue Sep 13 2011 00:00:00 GMT-0600 (MDT)"
		, "created": "Tue Sep 13 2011 00:00:00 GMT-0600 (MDT)"
		, "tags": [
			"ansble"
			, "servers"
			, "cherokee"
			, "aws"
			, "railo"
			, "couchdb"
			, "cfml"
		]
		, "images": [
		]
		, "headerImage": ""
	}
	, "short-circuit-and-the-javascript-if-statement": {
		"title": "Short Circuit and the Javascript IF Statement"
		, "content": "<p>A quick javascript tip that lets you eliminate small IF statements</p><p>Ok so it&rsquo;s not really that kind of Short Circuit, though it is almost as cool. In javascript, as in many programming languages logical and statements short circuit if the first element isn't true. So basically if you say</p><p><pre><code>if(false && true)</code></pre></p><p>Javascript start processing the expression sees the false, knows that the statement can never be true and moves on without ever touching the true. This has some interesting practical applications. Because it means that you can use the first statement as an IF and the second can be your command to be executed.</p><p>Pull up your javascript console and try this: <pre><code>( 1 === 1 ) && alert('Johnny 5 is alive!');</code></pre>yep amazing! It does the same thing as:<pre><code>\nif( 1===1) {\n      alert(' Johnny 5 is alive!');\n}\n</code></pre></p><p>Sure there are other short forms of that if statement that would work. But, the short circuited form is clever, and interesting. It really shows off one of the interesting aspects of the language that you don&rsquo;t run into everyday. I think it&rsquo;s kind of elegant. Not as readable, sure. Still a neat trick for creating slightly more compact code. I wish I could take credit for it, but I found it reading through someones pull request on git hub. When I find the project again I&rsquo;ll post a link to it... Now it&rsquo;s time for some hot chocolate and breakfast.</p>"
		, "updated": "Sat Jan 28 2012 00:00:00 GMT-0700 (MST)"
		, "id": "short-circuit-and-the-javascript-if-statement"
		, "type": "article"
		, "publicApi": true
		, "published": "Sat Jan 28 2012 00:00:00 GMT-0700 (MST)"
		, "created": "Sat Jan 28 2012 00:00:00 GMT-0700 (MST)"
		, "tags": [
			"tip"
			, "programming"
			, "javascript"
		]
		, "images": [
		]
		, "headerImage": ""
	}
	, "audio-and-old-androids": {
	    "title": "Audio and Old Androids"
	    , "content": "<p>I just got done working on a project that involved the use of the audio tag (with flash fallback for IE) and thought I would share a couple of the issues that we ran into in working on it, and how they were solved. For those of you interested in such things the project was the new Scripture Mastery activities for seminary students, high school students enrolled in a religion class sponsored by The Church of Jesus Christ of Latter-day Saints.</p><p>The project included all sorts of new ideas and thoughts, and is using a pretty custimized version of Backbone as the core of its client side operations. But I digress...</p><p>So audio tags. They are really pretty awesome, and they work pretty well in theory for everything that supports them. The problem is that there are some hangups in older versions of browsers that you would think wouldn't have any issues with them at all. I am looking at you Android browser.</p><p>We couldn't figure out why android browser, not chrome for android, but actual android browser, was having issues with our audio tag. For some reason it decided to balk completely, not even downloading the audio file. After we spent a couple of days expirmenting with solutions and different ways of structuring the data I though I would share so that you don't have to do the same thing.</p><p>The first thing you should know is that Android browser does not support audio over SSL. Not sure why that is. but it doesn't. We tried a variety of ways of structuring the audio tag, but if the source for the audio involved communicating over SSL it wouldn't even begin the request. So lesson #1 avoid SSL.</p><p>The second thing that we learned, was that the <source> tag doesn't seem to work either. This is actually a bigger problem in some ways. We wound up having to detect old versions of Android browser and serve them a different template for the audio component that used the src attribute instead of the <source> tags. If you are going to support older Androids then you might want to do something similar. The detection script we are using looks like this:</p><pre><code>var ua = navigator.userAgent.toLowerCase()\n, is_android = ua.match(/android/gi) && ua.match(/crmo/gi) === null;\n</code></pre><p>it is a modified version of one I found on stackoverflow and promptly lost. If you find the original let me know so I can link it up here.</p><p>Hopefully those two things will help save you the time that we spent tracking them down. Good luck out there in the trenches!</p>"
	    , "updated": "Thu May 16 2013 00:00:00 GMT-0600 (MDT)"
	    , "id": "audio-and-old-androids"
	    , "type": "article"
	    , "publicApi": true
	    , "published": "Thu May 16 2013 00:00:00 GMT-0600 (MDT)"
	    , "created": "Thu May 16 2013 00:00:00 GMT-0600 (MDT)"
	    , "tags": [
	      "html5"
	      , "audio"
	      , "android"
	      , "javascript"
	      , "js"
	    ]
	    , "images": [
			]
			, "headerImage": ""
	}
	, "trust-and-the-box": {
		"title": "Trust and the Box"
		, "content": "<p>Last Friday I was in Historic Mission Control at NASA&rsquo;s Johnson Space Center(jsc) listening to Milt Heflin, one of jsc&rsquo;s Associate Directors, describe some of the history that happened there to a group of educators from across the country. Sitting at one of the consoles preserved from the Apollo days I was amazed as he unfolded story after story about the people who had worked in these seats decades ago.</p><p>One story stood out. It was the story of a young engineer who was sitting in mission control, monitoring the electrical systems on Apollo 12. We all know the story of Apollo 13, and this same engineer played a critical role in it&rsquo;s safe return, but somehow the near disaster of Apollo 12 has faded from our collective memory.</p><p>As Milt told it about 30 seconds after Apollo 12 lifted of the pad on its way to the moon, the telemetry readings in mission control went haywire. They became garbled and non-sensical. In Mission Control the engineers sitting at their consoles stared down at screens uncertain what to do and unsure what had happened. capcom could still talk to the capsule so they knew it was still on it&rsquo;s journey and the astronauts were alive. But the astronauts were surrounded by a cacophony of flashing warning lights and alarms.</p><p>No one knew what had happened, or what to do. After staring at the garbled screen in front of him the young eecom (Electrical, Environmental and COMmunication systems controller), John Aaron, turned from his console to Gerry Griffin, the Flight Director, and said &ldquo;Flight, try sce to aux.&rdquo; The flight director had no idea what he wanted. Neither did the astronaut serving as capcom (Capsule Communicator) who the Flight Director instructed to pass the message onto the three astronauts in the capsule. Both Gerry Griffin and the capcom asked John to repeat the message.</p><p>Once he repeated it there was no further discussion. The message made as much sense to the Commander, Pete Conrad, inside the capsule as it had to capcom and the Flight Director. When he heard &ldquo;Try sce to aux&rdquo;  come through the radio he exclaimed &ldquo;What… is that?&rdquo; But the astronaut to his right, Alan Bean, knew what it was.</p><p>Bean had seen the switch during a training session a year before and remembered where it was located. He quickly reached up flipping the switch transitioning the Signal Conditioning Equipment (sce) from it&rsquo;s normal power source to auxiliary power. Within seconds the consoles in mission control began to come back on line and fewer of the warning alarms and lights were flashing.</p><p>After checking his now functioning screen, John Aaron requested that the astronauts be instructed to reinstall the fuel cells. With that message passed on, the rest of the consoles came back on line and the capsule returned to normal.</p><p>Later review revealed that the capsule had been struck repeatedly by lightning damaging the electrical system shortly after launch. Because of the expertise, curiosity, and memories of Alan Bean and John Aaron, who had both seen something similar only one time before, the mission was able to proceed on it&rsquo;s way to the Moon successfully.</p><p>Milt made a few more points before telling some more stories. He pointed out that the switch used to control the power source for the sce was used only on the pad for testing. It was never intended for use during a mission. That is why the Flight Director and the capcom, typically a flown astronaut, had never heard of it before. It took a supreme act of trust on the part of the Flight Director, capcom, and the mission commander for them to accept and relay the message so that Alan Bean could find the switch and save the mission.</p><p>That was Milt&rsquo;s big point. There is an amazing level of trust that must exist in Mission Control for any mission to work. Everyone in Mission Control is an expert in their field, and sometimes the Flight Director must trust a young, less experienced, individual in order for a mission to be successful.</p><p>This is a powerful concept. I think it is also the key reason that we struggle to innovate. In business today we function based on a system of distrust.</p><p>There has been lots written by people like 37Signals about this phenomenon and how it creates an environment that makes it difficult for people to get things done. However, this problem goes deeper then just getting things done.</p><p>We are taught to trust our leaders completely, and that even when we don&rsquo;t we should still do what they say without much discussion. They are the leader. They must know what they are doing. If this had been the only kind of trust in place that fateful day in mission control, Apollo 12 would have been aborted never arriving on the surface of the moon.</p><p>In mission control trust works the opposite way it does in the normal business office. Trust flows down the hierarchy as well as up. The Flight Director, while the most experienced person in the room, understands that each member of the team is a specialist in their specific area. They know exactly what is going on, and what needs to be done to accomplish the end goal. He has the overall picture but they understand the details and he trusts those details to them.</p><p>The same is true of the astronauts on the other end. They are each trained to perform certain aspects of the mission and while the Commander knows what those parts are he cannot perform them on his own. He does not have the specific training required to do them all.</p><p>This downward trust is the key to innovation. How many projects have been stunted by someone who is unwilling to say they don&rsquo;t know the answer? Or someone who is unable to trust the people who really do know? Managers should provide the vision, the overall plan while their team members use their training to create innovative methods to achieve that vision.</p><p>This is difficult. This takes complete trust and lots of humility. It means leaders letting go of control. It means stepping back and letting your young eecom say &ldquo;Flight, try sce to aux&rdquo; and without discussion passing that message onto capcom, and then the astronauts inside. So that the one person who knows what it means can do it and save the mission. Trusting our teams is the only way for us to get outside the box and find truly innovative solutions.</p><p>More info on Apollo 12:</p><p><ul><li><a href=\"http://www.jsc.nasa.gov/history/oral_histories/AaronJW/aaronjw.pdf\">http://www.jsc.nasa.gov/history/oral_histories/AaronJW/aaronjw.pdf</a></li><li><a href=\"http://en.wikipedia.org/wiki/Apollo_12\">http://en.wikipedia.org/wiki/Apollo_12</a></li></ul></p>"
		, "updated": "Fri Oct 08 2010 00:00:00 GMT-0600 (MDT)"
		, "id": "trust-and-the-box"
		, "type": "article"
		, "publicApi": true
		, "published": "Fri Oct 08 2010 00:00:00 GMT-0600 (MDT)"
		, "created": "Fri Oct 08 2010 00:00:00 GMT-0600 (MDT)"
		, "tags": [
			"creativity"
			, "trust"
			, "management"
			, "innovation"
		]
		, "images": [
		]
		, "headerImage": "http://upload.wikimedia.org/wikipedia/commons/1/1f/Apollo_12_launches_from_Kennedy_Space_Center.jpg"
	}
	, "approaching-css-the-oo-way": {
		"title": "Approaching CSS the OO Way"
		, "content": "<p>In an interview somewhere in the web development industry:</p><p>\"Hey, have you heard of CSS?\"</p><p>Oh yeah! Totally... it&rsquo;s that stuff that designers write right? You know it makes things pretty?</p><p>\"Yeah, that&rsquo;s the stuff. Can you write it?\"</p><p>Sure... I mean designers can right? They don&rsquo;t have CS degrees, so yeah I can.</p><p>\"Perfect. You&rsquo;re hired.\"</p><p>Sometimes I wonder if this is actually how our industry thinks about CSS. Sometimes I am pretty sure it is, and that makes me cringe. Not inside, but physically cringe. I am doing it right now...</p><p>Because it makes me cringe, I want to talk about why it is totally incorrect. I want to explore why this perception, of CSS as a designers language with no basis in Computer Science, is costing us headaches, money, and an innumerable amount of time. Because, the truth is, CSS should be written using the same mindset that any developer brings to creating objects or database tables. In fact the ideas of atomization and normalization from DB architecture are excellent parallels to how we should be approaching authoring CSS.</p><p>Before we look at how SOLID applies to CSS let&rsquo;s talk about the C of CSS for a second. Cascade. We&rsquo;re not talking about the mountain-stream-in-spring-filled-with-snow-melt variety of cascade. What we are actually talking about is the Inheritance model of CSS. Hopefully, inheritance model just woke you back up, because this thing is incredibly powerful.</p><p>Without going into the details of specificity the Cascade allows us to inherit styles from not one or two rules, but from as many as we want. Hold onto that idea for a second. That means that if we have 4 rules that govern different aspects of a DOM elements style, they will all be reflected in that element&rsquo;s visual display. Specificity will decide which aspects of the rules get overridden by other rules if they overlap, and these two things mean that we have an incredibly flexible inheritance model.</p><p>Enough about object genealogy... let&rsquo;s talk about how SOLID applies here. </p><p>The Single Responsibility Principle says that &ldquo;every class should have a single responsibility, and that responsibility should be entirely encapsulated by the class&rdquo;. This applies directly to CSS. When you write a class in CSS it should have a single responsibility, and that responsibility should be encapsulates in the class. For example, if I have several items that need rounded corners (4px) I would write a class named round-corner-4 that looks like this:</p><pre><code>.round-corner-4{ border-radius:4px; }</code></pre><p>All border radiuses of 4px can now be handled by this single class, regardless of what other classes are applied to the DOM element. The class does one thing, and it does it for every DOM element that needs it.</p><p>The next principle is Open/Closed and this is essentially free in CSS. Classes are always open for extension, and their properties are essentially immutable. This means that we can extend each class by creating a more specific class (think specificity again...) that overrides its properties. You aren't modifing the underlying class, but you are extending it's functionality and changing it as needed.</p><p>This brings us to Liskov Substitution. This one took me awhile to figure out, and may be the weakest example of any of the SOLID principles. Liskov substitution says that you should be able to use any object that is a subtype of another object in place of the object it is a subtype of, without any issues. I had to re-read the wikipedia page a ton before I finally found the example at the bottom and started to understand this one.</p><p>So Liskov and CSS, remember this is a bit of stretch, boils down to &ldquo;any class of a given type should be able to replace any other class of the same type without any adverse side effects.&rdquo;</p><p>What?</p><p>Let&rsquo;s say we create a font class called sans-serif, that dictates that the font face for anything it is applied to is sans-serif. If we have another font face class, we&rsquo;ll call it serif, then we should be able to replace .sans-serif with .serif on a DOM element and not have any issues. This leads to very atomized classes with very specific jobs. Which is a great thing.</p><p>I. Interface separation... so this one really doesn&rsquo;t have anything to do with css. If we stretch it like a batch of taffy we might be able to say something like: your DOM shouldn&rsquo;t need classes that it doesn&rsquo;t need in order to look right. But, if you are already writing nicely SO classes then you are already doing this. So... on to the next one.</p><p>D stands for definitely doesn&rsquo;t apply to CSS. Actually it stands for Dependency Inversion, which really doesn&rsquo;t have any real application in CSS as far as I can tell. If I think of one I will write it up.</p><p>It turns out that what this article is really about it writing simple, concise, focused CSS classes and applying lots of the to your DOM. Mostly it&rsquo;s about the SOL of SOLID. Writing good CSS is hard. It takes thought, it takes planning, it takes refactoring, and it takes thinking about things from the framework of classical Computer Science. CSS is a beautiful thing when well written. It is flexible, powerful and fun to work with. So stop slapping your CSS together to make it &ldquo;look right&rdquo; and start writing well thought out CSS that will be easy to maintain and extend for years to come.</p>"
		, "updated": "Wed Mar 27 2013 00:00:00 GMT-0600 (MDT)"
		, "id": "approaching-css-the-oo-way"
		, "type": "article"
		, "publicApi": true
		, "published": "Wed Mar 27 2013 00:00:00 GMT-0600 (MDT)"
		, "created": "Wed Mar 27 2013 00:00:00 GMT-0600 (MDT)"
		, "tags": [
			"code"
			, "OO"
			, "css"
		]
		, "images": [
		]
		, "headerImage": ""
	}
	, "toward-a-more-responsive-future": {
		"title": "Toward a More Responsive Future"
		, "content": "<p>Let&rsquo;s face it, ultimately the ideal solution for responsive images does not exists yet. Honestly, I am not sure that browser makers really have a dog in this fight so it will likely be a while before it gets done on their end. Hopefully the W3C will see all the discussion and decide to include something in the spec that would prompt browser makers to tackle this in a semantic way. Until then we are left with a variety of options that are not necessarily awesome.</p><p>Except this one, it's awesome. Ok, that might be a bit of hubris, the reality is this is just a more elegant hack. But before we dive into the details let&rsquo;s discuss device detection, and why it is a short sighted solution, since it seems to be winning over hearts and allies.</p><p>Ultimately device detection has two major shortcomings: 1) security, and 2) it&rsquo;s inability to determine display size. If you are writing your own server side device detection then there is really only one issue, #2, if you are using some one's third party service then you need to think long and hard about #1.</p><p>So security, whenever you rely on an outside service to manage any aspect of your site you are opening yourself up to the possibility that something will go wrong on their end and effect your site negatively. They could get hacked, they could go out of business, they could be purchased by someone with less than desirable intentions, or they could get knocked of the web by a DOS attack. I can hear you thinking: &ldquo;But hey, they are only images. What&rsquo;s the big deal?&rdquo; Well there are a couple of big deals. First,  javascript returned as the SRC of an image is executed in the browser meaning someone could execute arbitrary JS on your site. Setting that nightmare aside, if all the images on the third party system got replaced by ads to your biggest competitor, that would be a very bad thing for your website. As would all the images disappearing from your site because of an outage.</p><p>Of course these problems are purely theoretical, I have no idea what the security, plans or intentions of any of the sites providing this service are. But, they are possibilities that need to be considered.</p><p>Now for a more general issue with device detection and responsive images. Take a moment and read through all the comments on sencha.io src&rsquo;s documentation. It becomes clear pretty fast that their are some drastic limitations to server side detection that are not shared by client side methods. The two big ones are: the inability to detect device rotation on mobile devices, and dealing with very large screens. Server side device detection requires you to setof default sizes for given devices. This means, in sencha.io&rsquo;s case, that the maximum size of an image returned from automatic resizing is 980px. So if you need an image to display at 1300px on those beautiful new thunderbolt displays, and then automatically scale down to 120px on an iPhone, you are out of luck.</p><p>Sure you can specify the width of the image explicitly, but now you are back to doing browser size detection in javascript and rewriting the src of the image. Which you could have been doing all along without the outside dependency.</p><p>One of the realities of the responsive web is that it needs to scale up as well as down. Responsive design is about tailoring the experience to the particular users context, whether it is larger or smaller than your default. This means we shouldn&rsquo;t be sending the same experience to someone on a 2000+px screen as we do to a 1200px screen. For me this is the last nail in the coffin for device detection as the ideal solution. It could be useful for setting smart defaults, but ultimately fails to provide a truly responsive experience.</p><p>Now on to the fun stuff, that probably brought you here in the first place: future friendly javascript-less client side responsive images. Be aware that these, much like using noscript, are still a little hack-ish. But, this seems to be a better solution than noscript to me.</p><p>The image tag, like pretty much every other element in html, can receive a background style. This means that we can create an image whose background changes, based on media queries. At this point I should insert the caveat that you need to use something like respond.js to make media queries work in Internet Explorer, but there are ways around that, depending on how you structure your media queries. Another drawback is that each image will need a unique identifier, probably an ID, so we can set its &ldquo;source&rdquo;. So now some example code:</p>\n<pre><code>\n&lt;style&gt;      #myImage{\n          background:url(respond/img/myImage.jpg) no-repeat;\n\n          width:96px; height:95px;\n     } \n&lt;/style&gt;\n\n\n&lt;img id=\"myImage\" src=\"respond/img.png\" alt=\"This is a test\" /&lt;\n</code></pre><p>That&rsquo;s really all there is to it. The respond/img.png is a 1px by 1px transparent png that weighs a whopping 96 bytes. It is the hack-ish part, but we need it to hide the alt text, and the missing image styles added in by the browser. Hopefully that need will go away in the future, and removing it would be very simple in that case.</p><p>This method opens up the door to some crazy stuff too. Like having different aspect ratios for images at different screen resolutions. Or like having all the images for a page stored in a single sprite per screen resolution. Imagine all your images coming in as essentially 2 http requests, one for the img.png and the other for all of them as a single image. Is that a good idea? I have no idea... but it is possible.</p><p>Hopefully someday soon we will have an img tag that is responsive from the get go, but for now we need to find the option that is going to work best for our particular environment and needs. This is my current favorite, though there are probably cleaner methods for doing this. I hope... if you know of one write it up so we can all discuss it more. Until then go forth and be responsive!</p>"
		, "updated": "Wed Nov 07 2012 00:00:00 GMT-0700 (MST)"
		, "id": "toward-a-more-responsive-future"
		, "type": "article"
		, "publicApi": true
		, "published": "Wed Nov 07 2012 00:00:00 GMT-0700 (MST)"
		, "created": "Wed Nov 07 2012 00:00:00 GMT-0700 (MST)"
		, "tags": [
			"elections"
			, "politics"
		]
		, "images": [
		]
		, "headerImage": ""
	}
	, "moving-the-world": {
		"title": "Moving the World"
		, "content": "<p>Dear America: </p><p>In the wake of yesterday's election it would be wise to reflect on these wise words from our first President, George Washington.</p><p>&ldquo;I have already intimated to you the danger of parties in the State, with particular reference to the founding of them on geographical discriminations. Let me now take a more comprehensive view, and warn you in the most solemn manner against the baneful effects of the spirit of party generally.</p><p>This spirit, unfortunately, is inseparable from our nature, having its root in the strongest passions of the human mind. It exists under different shapes in all governments, more or less stifled, controlled, or repressed; but, in those of the popular form, it is seen in its greatest rankness, and is truly their worst enemy.</p><p>The alternate domination of one faction over another, sharpened by the spirit of revenge, natural to party dissension, which in different ages and countries has perpetrated the most horrid enormities, is itself a frightful despotism. But this leads at length to a more formal and permanent despotism. The disorders and miseries which result gradually incline the minds of men to seek security and repose in the absolute power of an individual; and sooner or later the chief of some prevailing faction, more able or more fortunate than his competitors, turns this disposition to the purposes of his own elevation, on the ruins of public liberty.</p><p>Without looking forward to an extremity of this kind (which nevertheless ought not to be entirely out of sight), the common and continual mischiefs of the spirit of party are sufficient to make it the interest and duty of a wise people to discourage and restrain it.</p><p>It serves always to distract the public councils and enfeeble the public administration. It agitates the community with ill-founded jealousies and false alarms, kindles the animosity of one part against another, foments occasionally riot and insurrection. It opens the door to foreign influence and corruption, which finds a facilitated access to the government itself through the channels of party passions. Thus the policy and the will of one country are subjected to the policy and will of another.&rdquo;</p><p>Whether your party won or lost last night is really irrelevant. Our leaders have been chosen, and now it is requisite that we all get to work. Our nation faces some of the most challenging problems in it's history, and we all need to get to work on solving them.</p><p>The only way we can ever solve the mighty challenges that stand before us is by working together humbly. So Let's get to it. As Joseph Smith wisely counseled the Quorum of the 12 apostles &ldquo;round up your shoulders, and bear off this ... [nation] before heaven and earth, and before God, angels and men&rdquo;</p><p>The time has come for all of us to work to solve the problems we see in the world around us. We can't afford to stand around and wait for others to solve them. Start small, but start. Our leaders can't do it without us. So please go change some small part of your world today, I'll do the same, and together we'll move the world towards a brighter tomorrow.</p>"
		, "updated": "Wed Nov 07 2012 00:00:00 GMT-0700 (MST)"
		, "id": "moving-the-world"
		, "type": "article"
		, "publicApi": true
		, "published": "Wed Nov 07 2012 00:00:00 GMT-0700 (MST)"
		, "created": "Wed Nov 07 2012 00:00:00 GMT-0700 (MST)"
		, "tags": [
			"elections"
			, "politics"
		]
		, "images": [
		]
		, "headerImage": ""
	}
	, "there-is-a-right-way": {
		"title": "There is a Right Way"
		, "content": "<p>I grew up working with power tools. I think I was 9 the first time I used a router. As a family we were making mancala boards for christmas presents for family and friends. The noise was intense, the chips flying were scary, but that quickly fades when you watch the finished product emerge through the clear acrylic jig.</p><p>That simple experience contained some lessons that have shaped my life, and, less often than they should, my development, and design.</p><p>The first lesson, is that taking the time to begin correctly saves you time in the end. This one should be pretty obvious to everyone who has ever worked on a project of any sort. Making sure that you have the correct tools, and that the plans are clearly laid out makes a huge difference in your ability to execute the project. Too many times we rush into projects without designing them, slapping down pretty comps, and theoretical architectures.</p><p>My dad had carefully researched mancala, selected the base materials, (oak in this case), the correct bit for the router, finishing products, researched jig making, and created a jig for us to use with the router. The end result of that setup work was that I could as a 9 year old with little experience create a mancala board ready to be finished in about 15 minutes. If you don&rsquo;t do the setup work and research, at the beginning you will do it many times over during the project.</p><p>The second lesson, is that there is a right way to do things. Dad taught us carefully how to put on the safety equipment, how to start the router, and how to work it through the jig to produce a jig as safely, and quickly as possible. We could have made the same mancala boards with a chisel, or wood carving knives, but the time constraints, age of operators, and quantity we were shooting for all pointed to the router being the correct tool for the job. Other decisions came with that one, like using a jig to make it as simple as possible to recreate the cuts in board. Using a plunge router to ensure that all of them were the same depth. Picking a half round bit so that the holes were rampes on their sides to allow easy game play. What safety equipment was needed. Each of those decisions was driven by the requirements and constraints of the project.</p><p>The same applies to every type of project we tackle. Constraints should drive the choice of technology, team structure, and process. There is a saying that when you have a hammer everything looks like a nail, that has to be avoided for designs and projects to be executed well. If you are holding a hammer why? Why is that framework, or that technology the correct answer for this project?If you don&rsquo;t have a reason beyond it is new, or it is what we have always done maybe there should be some research to see if there is a better solution out there. If not, go with what you know, if there is, better get cracking on learning it.</p><p>This is how craftsmen in a variety of disciplines have been working for years, often building their own tools, and jigs, to ensure that the end product lives up to the standards that they and their customers expect. We as developers and designers need to do the same thing, creating a diverse toolbox that can be used to correctly solve a wide variety of design challenges. Because let&rsquo;s face it, you can remove bolts with a cold chisel and a hammer, but a socket wrench just makes more sense.</p>"
		, "updated": "Mon Oct 29 2012 00:00:00 GMT-0600 (MDT)"
		, "id": "there-is-a-right-way"
		, "type": "article"
		, "publicApi": true
		, "published": "Mon Oct 29 2012 00:00:00 GMT-0600 (MDT)"
		, "created": "Mon Oct 29 2012 00:00:00 GMT-0600 (MDT)"
		, "tags": [
			"projects"
			, "development"
			, "project management"
			, "design"
		]
		, "images": [
		]
		, "headerImage": ""
	}
	, "a-tale-of-two-cookies": {
		"title": "A Tale of Two Cookies: Securing ColdFusion Session Cookies"
		, "content": "<p>Recently at work we went through a security review. It was a great learning experience to have outside contractors try and break into the web application. Found several things that I didn't expect and some others that I had never even considered. One of the last vulnerabilities that they identified was that the CFID and CFTOKEN cookies had an expiration date set too far in the future, 2040 or something like that, and that they did not have the secure flag set.</p><p>So I did some research and thanks to a couple of posts by Ben Nadel got a system in place that encrypted/decrypted the cfcookie and expired it immediately. It looked something like this and is nearly identical to his code from the previous articles (all the code goes in the Application.cfc):</p>\n<code>\n  <pre>\n      <cfcomponent displayname=\"Application\" output=\"true\">\n      <cfscript>\n             this.name = \"TestApp\";\n            this.applicationTimeout = createTimeSpan(0,1,0,0);\n             this.loginstorage = \"session\";\n             this.sessionmanagement = true;\n             this.sessiontimeout = createTimeSpan(0,0,30,0);\n             this.setClientCookies = false;\n            application.initKey = hash(hash('someRandomChars'));\n      </cfscript>\n       \n         <cfif StructKeyExists( COOKIE, \"ID\" )>\n              <cfset this.DecryptedID = Decrypt(COOKIE.ID,application.initKey) />\n               <cfcookie name=\"CFID\"\n      value=\"#ListFirst( this.DecryptedID )#\"\n      expires=\"NOW\"\n      secure=\"yes\"/>\n               <cfcookie name=\"CFTOKEN\"\n      value=\"#ListRest( this.DecryptedID )#\"\n      expires=\"NOW\"\n      secure=\"yes\"/>\n          </cfif>\n       \n      <cffunction name=\"onSessionStart\" output=\"false\">\n           <cfset var local = structNew()>\n           <cfset local.encryptedID = encrypt(session.CFID & ','& session.CFToken,application.initKey)>\n       \n           <cfcookie name=\"id\"\n      value=\"#local.encryptedID#\"\n      secure=\"yes\">\n      </cffunction>\n      </cfcomponent>\n  </pre>\n</code>\n<p>The important parts are the pseudo-constructor that generates the CFID and CFTOKEN cookies with an expiration of \"NOW\", and the onSessionStart that creates the encrypted session cookie. Because the pseudo-constructor gets executed before anything else the CFID and CFTOKEN are set before they are needed on each page. This allows them to have an expiration of \"NOW\" so that they never appear in the browser's cookie store, remaining in memory for that page only. This leaves only the encrypted session cookie visible.</p><p>While this is a good start, and hides the CFID and CFTOKEN effectively it does not prevent session hijacking. So I went a step further and added to the code to create a unique encryption key for each user, that would make it much more difficult to hijack the session and crack the encryption to access the CFID and CFTOKEN. So here is the expanded code:</p>\n<code>\n  <pre>\n    <cfcomponent displayname=\"Application\" output=\"true\">\n    <cfscript>\n           this.name = \"TestApp\";\n           this.applicationTimeout = createTimeSpan(0,1,0,0);\n           this.loginstorage = \"session\";\n           this.sessionmanagement = true;\n           this.sessiontimeout = createTimeSpan(0,0,30,0);\n           this.setClientCookies = false;\n          application.initKey = hash(hash('someRandomChars'));\n    </cfscript>\n     \n         <cfif structKeyExists(GetHttpRequestData().headers,'X-Forwarded-For')>\n              <cfset myRemoteAddr = GetHttpRequestData().headers['X-Forwarded-For']>\n         <cfelse>\n              <cfset myRemoteAddr = cgi.REMOTE_ADDR>\n         </cfif>\n     \n    <cfif StructKeyExists( COOKIE, \"ID\" )>\n            <cfset this.DecryptedID = Decrypt(COOKIE.ID,hash(application.initKey& myRemoteAddr&cgi.http_user_agent) />\n             <cfcookie name=\"CFID\"\n    value=\"#ListFirst( this.DecryptedID )#\"\n    expires=\"NOW\"\n    secure=\"yes\"/>\n             <cfcookie name=\"CFTOKEN\"\n    value=\"#ListRest( this.DecryptedID )#\"\n    expires=\"NOW\"\n    secure=\"yes\"/>\n        </cfif>\n     \n    <cffunction name=\"onSessionStart\" output=\"false\">\n         <cfset var local = structNew()>\n         <cfset local.encryptedID = encrypt(session.CFID & ','& session.CFToken,hash(application.initKey& myRemoteAddr&cgi.http_user_agent)>\n     \n    <cfcookie name=\"id\"\n    value=\"#local.encryptedID#\"\n    secure=\"yes\">\n     \n    </cffunction>\n    </cfcomponent>\n  </pre>\n</code>\n<p>With these aims in mind I hit upon the idea to use the cgi.remote_addr as a seed for the encryption key. As it is unlikely that users will change IPs during a their time on the site it provides a good seed that a computer attempting to hijack the session wouldn't have or would have a difficult time trying to acquire. So here is the expanded code:</p><p>There are a few extra things going on in the code above. When I was working on this article I discovered these two articles that discuss accessing the original IP in the event that a proxy was being used. Proxies typically add a header named 'X-Forwarded-For' that contains the originating IP address which is what we want to seed with. So I added in a few lines of code to check for the presence of 'X-Forwarded-For' and substitute that for cgi.remote_addr if it is present. While I was at it I added the cgi.http_user_agent as a second seed that helps to make it more difficult to hijack the session.</p><p>Does this make it impossible to hijack the session? No. Security is about making it more difficult to gain access. There is always a way to compromise a system, it is just a factor of time and computing power. Of course if you want to introduce more complexity to the algorithm you could repeat the encryption process with different cgi variables acting as seeds to keys ad infinitum.</p><p>With that said this code, or something similar, makes sessions much more difficult to hijack and much more secure against hackers then they would be with a plain CFID and CFTOKEN system.</p>"
		, "updated": "Fri Mar 05 2010 00:00:00 GMT-0700 (MST)"
		, "id": "a-tale-of-two-cookies"
		, "type": "article"
		, "publicApi": true
		, "published": "Fri Mar 05 2010 00:00:00 GMT-0700 (MST)"
		, "created": "Fri Mar 05 2010 00:00:00 GMT-0700 (MST)"
		, "tags": [
			"code"
			, "security"
			, "coldfusion"
		]
		, "images": [
		]
		, "headerImage": ""
	}
}